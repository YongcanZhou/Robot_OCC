cmake_minimum_required(VERSION 3.12)

project(VisualizationDemoV01)

# use c++ 11 standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++0x")

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

if (WIN32)
set(Qt5Core_DIR D:/app/Qt/5.12.12/msvc2017_64/lib/cmake/Qt5Core)
set(Qt5Widgets_DIR D:/app/Qt/5.12.12/msvc2017_64/lib/cmake/Qt5Widgets)
set(Qt5Gui_DIR D:/app/Qt/5.12.12/msvc2017_64/lib/cmake/Qt5Gui)
set(Qt5Gamepad_DIR D:/app/Qt/5.12.12/msvc2017_64/lib/cmake/Qt5Gamepad)
set(Qt5PrintSupport_DIR D:/app/Qt/5.12.12/msvc2017_64/lib/cmake/Qt5PrintSupport)
# set(Eigen3_DIR D:/app/eigen-3.4.0)
# set(OCC_DIR D:/app/OpenCASCADE-7.4.0-vc14-64/opencascade-7.4.0/win64/vc14/lib)
endif(WIN32)

# if (UNIX)
# set(Qt5Core_DIR /opt/Qt5.11.2/5.11.2/gcc_64/lib/cmake/Qt5Core)
# set(Qt5Widgets_DIR /opt/Qt5.11.2/5.11.2/gcc_64/lib/cmake/Qt5Widgets)
# set(Qt5Qt5Gui_DIR /opt/Qt5.11.2/5.11.2/gcc_64/lib/cmake/Qt5Gui)
# set(Qt5Gamepad_DIR /opt/Qt5.11.2/5.11.HEADER2/gcc_64/lib/cmake/Qt5Gamepad)
# set(Qt5PrintSupport_DIR /opt/Qt5.11.2/5.11.2/gcc_64/lib/cmake/Qt5PrintSupport)
# endif(UNIX)

find_package(Qt5Core CONFIG REQUIRED)
find_package(Qt5Widgets CONFIG REQUIRED)
find_package(Qt5Gui CONFIG REQUIRED)
find_package(Qt5PrintSupport REQUIRED)
find_package(Qt5Gamepad REQUIRED)
# find_package(Eigen3 REQUIRED)
# find_package(OCC REQUIRED)

# # find aris
# if(UNIX)
#         add_definitions(-DUNIX)
#         find_package(aris REQUIRED PATHS /usr/aris)
# endif(UNIX)
# IF(WIN32)
#         find_package(aris REQUIRED PATHS C:/aris/aris-1.5.0)
# endif(WIN32)

# include_directories(${aris_INCLUDE_DIRS})
# include_directories("./lcm")
# include_directories("./include")
# include_directories("./plot/include")

# find OCCT
IF(WIN32)
        # find_library(OCCT PATHS D:/app/OpenCASCADE-7.4.0-vc14-64/opencascade-7.4.0/win64/vc14/lib)
        find_package(OpenCASCADE REQUIRED PATHS D:/app/OpenCASCADE-7.4.0-vc14-64/opencascade-7.4.0/cmake)
endif(WIN32)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
# include_directories(${EIGEN3_INCLUDE_DIR})
include_directories(${OpenCASCADE_INCLUDE_DIR})
# include_directories("./include")
include_directories("D:/app/OpenCASCADE-7.4.0-vc14-64/opencascade-7.4.0/inc")
include_directories("D:/app/eigen-3.4.0")


file(GLOB HEADERS
    *.h
    D:/app/OpenCASCADE-7.4.0-vc14-64/opencascade-7.4.0/inc/*.hhx
    D:/app/OpenCASCADE-7.4.0-vc14-64/opencascade-7.4.0/inc/*.h
)
file(GLOB SOURCES
    *.cpp

    *.ui

    ${HEADERS}
)

# set(SOURCES
#     src/button_flat.cpp
#     src/main.cpp
#     src/mainwindow.cpp
#     src/occview.cpp
# )
# set(HEADERS 
#     include/button_flat.h
#     include/general.h
#     include/libtree.h
#     include/occ.h
#     include/occview.h 
# )

# qt5_wrap_ui(SOURCES mainwindow.ui)
# set(FORMS mainwindow.ui)
set(RESOURCES images/image.qrc)
# set(PROJECT_LIBS
#     D:/app/OpenCASCADE-7.4.0-vc14-64/opencascade-7.4.0/win64/vc14/lib/*.lib
#     D:/Qt/5.12.12/msvc2017_64/lib/*.lib
# )
message(${OpenCASCADE_DIR} Qt5::Core)

add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS} ${RESOURCES})
target_link_libraries(${PROJECT_NAME}  Qt5::Core Qt5::Gui Qt5::Widgets Qt5::PrintSupport Qt5::Gamepad)

# target_link_libraries(${PROJECT_NAME} lcm)
# if(UNIX)
#     target_link_libraries(${PROJECT_NAME} ${aris_LIBRARIES} atomic)
# endif(UNIX)
# IF(WIN32)
#     target_link_libraries(${PROJECT_NAME} ${aris_LIBRARIES})
# endif(WIN32)

target_link_libraries(${PROJECT_NAME} ${OpenCASCADE_LIBRARIES})










